from typing import _VT, _KT, _T, Generic, Mapping, Iterable, Tuple, overload, Union


# NOTE: Most typehints are copied over and modified from typeshed
class IntDict(Generic[_VT]):
    
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self: dict[str, _VT], **kwargs: _VT) -> None: ...  # pyright: ignore[reportInvalidTypeVarUse]  #11780
    @overload
    def __init__(self, map: Mapping[int, _VT], /) -> None: ...
    @overload
    def __init__(
        self: dict[str, _VT],  # pyright: ignore[reportInvalidTypeVarUse]  #11780
        map: Mapping[str, _VT],
        /,
        **kwargs: _VT,
    ) -> None: ...
    @overload
    def __init__(
        self: dict[str, _VT],  # pyright: ignore[reportInvalidTypeVarUse]  #11780
        iterable: Iterable[tuple[str, _VT]],
        /,
        **kwargs: _VT,
    ) -> None: ...

    def __init__(self, *args:Mapping[int, _VT], **kwargs:_VT) -> None: ...

    
    @overload  # type: ignore[override]
    def get(self, key: _KT, /) -> _VT | None: ...
    @overload
    def get(self, key: _KT, default: _VT, /) -> _VT: ...
    @overload
    def get(self, key: _KT, default: _T, /) -> Union[_VT, _T]: ...
    @overload
    def pop(self, key: _KT, /) -> _VT: ...
    @overload
    def pop(self, key: _KT, default: _VT, /) -> _VT: ...
    @overload
    def pop(self, key: _KT, default: _T, /) -> Union[_VT, _T]: ...

    def pop(self, *args, **kwargs): ...
    def get(self, *args, **kwargs): ...

    def items(self) -> IntDictItems[_VT]: ...
    def keys(self) -> IntDictKeys: ...
    def values(self) -> IntDictValues[_VT]: ...
    def __delitem__(self, other:int) -> None: ...
    def __getitem__(self, index:int) -> _VT: ...
    def __reduce__(self): ...
    def __setitem__(self, index:int, object:_VT) -> None: ...


class IntDictItems(Generic[_VT]):
    def __iter__(self) -> Iterable[Tuple[int, _VT]]: ...
    def __len__(self) -> int: ...
    def __next__(self) -> Tuple[int, _VT]: ...
    def __reduce__(self): ...

class IntDictKeys:
    def __iter__(self) -> Iterable[int]: ...
    def __len__(self) -> int: ...
    def __next__(self) -> int:...
    def __reduce__(self):...

class IntDictProxy(IntDict):
    __weakref__:object
    def __reduce__(self): ...

class IntDictValues(Iterable[_VT]):

    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __next__(self): ...
    def __reduce__(self): ...

class u16dict:

    
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self: dict[str, _VT], **kwargs: _VT) -> None: ...  # pyright: ignore[reportInvalidTypeVarUse]  #11780
    @overload
    def __init__(self, map: Mapping[int, _VT], /) -> None: ...
    @overload
    def __init__(
        self: dict[str, _VT],  # pyright: ignore[reportInvalidTypeVarUse]  #11780
        map: Mapping[str, _VT],
        /,
        **kwargs: _VT,
    ) -> None: ...
    @overload
    def __init__(
        self: dict[str, _VT],  # pyright: ignore[reportInvalidTypeVarUse]  #11780
        iterable: Iterable[tuple[str, _VT]],
        /,
        **kwargs: _VT,
    ) -> None: ...

    def __init__(self, *args:Mapping[int, _VT], **kwargs:_VT) -> None: ...

    
    @overload  # type: ignore[override]
    def get(self, key: _KT, /) -> _VT | None: ...
    @overload
    def get(self, key: _KT, default: _VT, /) -> _VT: ...
    @overload
    def get(self, key: _KT, default: _T, /) -> Union[_VT, _T]: ...
    @overload
    def pop(self, key: _KT, /) -> _VT: ...
    @overload
    def pop(self, key: _KT, default: _VT, /) -> _VT: ...
    @overload
    def pop(self, key: _KT, default: _T, /) -> Union[_VT, _T]: ...

    def pop(self, *args, **kwargs): ...
    def get(self, *args, **kwargs): ...

    def items(self) -> u16dictitems[_VT]: ...
    def keys(self) -> u16dictkeys: ...
    def values(self) -> u16dictvalues[_VT]: ...
    def __delitem__(self, other:int) -> None: ...
    def __getitem__(self, index:int) -> _VT: ...
    def __reduce__(self): ...
    def __setitem__(self, index:int, object:_VT) -> None: ...    

class u16dictitems(Generic[_VT]):
    def __iter__(self) -> Iterable[Tuple[int, _VT]]: ...
    def __len__(self) -> int: ...
    def __next__(self) -> Tuple[int, _VT]: ...
    def __reduce__(self): ...

class u16dictkeys:
    def __iter__(self) -> Iterable[int]: ...
    def __len__(self) -> int: ...
    def __next__(self) -> int:...
    def __reduce__(self):...

class u16dictvalues(Generic[_VT]):
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Iterable[_VT]: ...
    def __len__(self) -> int: ...
    def __next__(self) -> _VT: ...
    def __reduce__(self): ...

class u8dict:

    
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self: dict[str, _VT], **kwargs: _VT) -> None: ...  # pyright: ignore[reportInvalidTypeVarUse]  #11780
    @overload
    def __init__(self, map: Mapping[int, _VT], /) -> None: ...
    @overload
    def __init__(
        self: dict[str, _VT],  # pyright: ignore[reportInvalidTypeVarUse]  #11780
        map: Mapping[str, _VT],
        /,
        **kwargs: _VT,
    ) -> None: ...
    @overload
    def __init__(
        self: dict[str, _VT],  # pyright: ignore[reportInvalidTypeVarUse]  #11780
        iterable: Iterable[tuple[str, _VT]],
        /,
        **kwargs: _VT,
    ) -> None: ...

    def __init__(self, *args:Mapping[int, _VT], **kwargs:_VT) -> None: ...

    
    @overload  # type: ignore[override]
    def get(self, key: _KT, /) -> _VT | None: ...
    @overload
    def get(self, key: _KT, default: _VT, /) -> _VT: ...
    @overload
    def get(self, key: _KT, default: _T, /) -> Union[_VT, _T]: ...
    @overload
    def pop(self, key: _KT, /) -> _VT: ...
    @overload
    def pop(self, key: _KT, default: _VT, /) -> _VT: ...
    @overload
    def pop(self, key: _KT, default: _T, /) -> Union[_VT, _T]: ...

    def pop(self, *args, **kwargs): ...
    def get(self, *args, **kwargs): ...

    def items(self) -> u8dictitems[_VT]: ...
    def keys(self) -> u8dictkeys: ...
    def values(self) -> u8dictvalues[_VT]: ...
    def __delitem__(self, other:int) -> None: ...
    def __getitem__(self, index:int) -> _VT: ...
    def __reduce__(self): ...
    def __setitem__(self, index:int, object:_VT) -> None: ...

class u8dictitems(Generic[_VT]):
    def __iter__(self) -> Iterable[Tuple[int, _VT]]: ...
    def __len__(self) -> int: ...
    def __next__(self) -> Tuple[int, _VT]: ...
    def __reduce__(self): ...


class u8dictkeys:
    def __iter__(self) -> Iterable[int]: ...
    def __len__(self) -> int: ...
    def __next__(self) -> int:...
    def __reduce__(self):...

class u8dictvalues(Generic[_VT]):
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Iterable[_VT]: ...
    def __len__(self) -> int: ...
    def __next__(self) -> _VT: ...
    def __reduce__(self): ...